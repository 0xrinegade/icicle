#pragma once

#include "../utils/storage.cuh"


struct fp_config {
  // field structure size = 8 * 32 bit
  static constexpr unsigned limbs_count = 8;
  // modulus = 52435875175126190479447740508185965837690552500527637822603658699938581184513
  static constexpr storage<limbs_count> modulus = {0x00000001, 0xffffffff, 0xfffe5bfe, 0x53bda402, 0x09a1d805, 0x3339d808, 0x299d7d48, 0x73eda753};
  // modulus*2 = 104871750350252380958895481016371931675381105001055275645207317399877162369026
  static constexpr storage<limbs_count> modulus_2 = {0x00000002, 0xfffffffe, 0xfffcb7fd, 0xa77b4805, 0x1343b00a, 0x6673b010, 0x533afa90, 0xe7db4ea6};
  static constexpr storage<limbs_count> modulus_4 = {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

  static constexpr storage<2 * limbs_count> modulus_wide = {0x00000001, 0xffffffff, 0xfffe5bfe, 0x53bda402, 0x09a1d805, 0x3339d808, 0x299d7d48, 0x73eda753,
                                                            0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
  // modulus^2
  static constexpr storage<2*limbs_count> modulus_sqared = {0x00000001, 0xfffffffe, 0xfffcb7fe, 0xa77e9007, 0x1cdbb005, 0x698ae002, 0x5433f7b8, 0x48aa415e, 
                                                            0x4aa9c661, 0xc2611f6f, 0x59934a1d, 0x0e9593f9, 0xef2cc20f, 0x520c13db, 0xf4bc2778, 0x347f60f3};
  // 2*modulus^2
  static constexpr storage<2*limbs_count> modulus_sqared_2 = {0x00000002, 0xfffffffc, 0xfff96ffd, 0x4efd200f, 0x39b7600b, 0xd315c004, 0xa867ef70, 0x915482bc, 
                                                              0x95538cc2, 0x84c23ede, 0xb326943b, 0x1d2b27f2, 0xde59841e, 0xa41827b7, 0xe9784ef0, 0x68fec1e7};
  static constexpr unsigned modulus_bits_count = 255;
  // m = floor(2^(2*modulus_bits_count) / modulus)
  static constexpr storage<limbs_count> m = {0x830358e4, 0x509cde80, 0x2f92eb5c, 0xd9410fad, 0xc1f823b4, 0xe2d772d, 0x7fb78ddf, 0x8d54253b};

  static constexpr storage<limbs_count> one = {0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
  static constexpr storage<limbs_count> zero = {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

  static constexpr storage<limbs_count> omega[12]={ {0x00000000, 0xffffffff, 0xfffe5bfe, 0x53bda402, 0x09a1d805, 0x3339d808, 0x299d7d48, 0x73eda753}, {0x00000000, 0x00010000, 0x76030000, 0xec030002, 0x760304d0, 0x8d51ccce, 0x00000000, 0x00000000}, {0x97743f7a, 0x7228fd33, 0x8713b700, 0xb38b21c2, 0x70d77ce2, 0x8c0625cd, 0x03fa66e7, 0x345766f6}, {0x7742bcce, 0x53ea61d8, 0xf20b6f76, 0x17beb312, 0x34cec32c, 0xdd1c0af8, 0x40267af9, 0x20b1ce91}, {0x7369df4e, 0x360c6099, 0x4c38fb8a, 0xbf6e88fb, 0x22f55448, 0xb4bcd40e, 0x157988ba, 0x50e0903a}, {0xf0a9ee53, 0x8140d032, 0xe2f95155, 0x2d967f4b, 0x64d8fdbd, 0x14a1e271, 0xec055e4d, 0x45af6345}, {0x660125be, 0x5130c2c1, 0x87f5713c, 0x98d0caac, 0x7fdd60d0, 0xb7c68b4d, 0x13588742, 0x68981114}, {0x817f694b, 0x4935bd2f, 0x99e8deff, 0x0a0865a8, 0xac0cf4ad, 0x6b368121, 0xe2e9f12e, 0x4f9b4098}, {0x2ee0434e, 0x4541b8ff, 0x3a6000fe, 0xd697168a, 0x0d80689f, 0x39feec24, 0x5526a654, 0x09516652}, {0xa5c2d854, 0x3c28d666, 0x26fc085e, 0xea437f96, 0x0f776af3, 0x8f4de02c, 0xdebf77a1, 0x325db5c3}, {0x59cd79e5, 0x4a838b5d, 0xbe9c622d, 0x55ea6811, 0x0a08f166, 0x09f1ca61, 0x5c49c834, 0x6d031f1b}, {0xa5d36306, 0xe206da11, 0x378fbf96, 0x0ad1347b, 0xe0f8245f, 0xfc3e8acf, 0xa0f704f4, 0x564c0a11}};
  static constexpr storage<limbs_count> omega_inv[12]={ {0x00000000, 0xffffffff, 0xfffe5bfe, 0x53bda402, 0x09a1d805, 0x3339d808, 0x299d7d48, 0x73eda753}, {0x00000001, 0xfffeffff, 0x89fb5bfe, 0x67baa400, 0x939ed334, 0xa5e80b39, 0x299d7d47, 0x73eda753}, {0x5166afd3, 0x9fc8017d, 0x6b4e0c26, 0xc54913cc, 0x3f1b189f, 0x787d7d08, 0xccbc6d03, 0x60b9f524}, {0x4c887948, 0x5e544cdf, 0xccb22542, 0xfc010d53, 0x2f188612, 0x687a73c9, 0xab91194b, 0x3b25b475}, {0x1cfca2ec, 0xae34a81e, 0x0928e68f, 0x6c7876bf, 0xf6c52b2a, 0xae25b21d, 0x432405d0, 0x5e73ed8c}, {0x168bba2c, 0x8d28c143, 0xdce28e78, 0xdb872ef3, 0x7dc75b61, 0x4e84b3cd, 0x61a2eeaf, 0x640d0974}, {0x20df9d12, 0x6207cd2f, 0x578d78bf, 0x0081066e, 0x79bf9cd6, 0x725ce48f, 0x34093e9a, 0x60c7efec}, {0xdd958780, 0x7d01866a, 0x6e4caccb, 0xdf7b4ee6, 0x45e9b713, 0x67e701a9, 0x084c71a4, 0x18ba7658}, {0x3193f385, 0x16654b4e, 0x8b542a79, 0x7dd34dc4, 0xe15d3727, 0x881dab49, 0x81fc6d1c, 0x6a61dbd7}, {0xc6a47727, 0x1b561347, 0x7904d0ab, 0x9ce86248, 0x5c3ad14d, 0x942c20e4, 0xf7456c9b, 0x5164ca4c}, {0xb639eb06, 0xdc982dea, 0xf707ac89, 0xa954d02f, 0xd485b39a, 0xae65b5bd, 0x9036d62f, 0x55612c87}, {0xd8543362, 0x961a252d, 0x64183203, 0x5046d178, 0xb9dc5986, 0x4ae25ffa, 0xc609b478, 0x391b2856}};
  static constexpr storage<limbs_count> inv[12]={ {0x80000001, 0x7fffffff, 0x7fff2dff, 0xa9ded201, 0x04d0ec02, 0x199cec04, 0x94cebea4, 0x39f6d3a9}, {0x40000001, 0x3fffffff, 0x3ffec4ff, 0xfece3b02, 0x07396203, 0x266b6206, 0x5f361df6, 0x56f23d7e}, {0x20000001, 0x1fffffff, 0x9ffe907f, 0xa945ef82, 0x086d9d04, 0x2cd29d07, 0xc469cd9f, 0x656ff268}, {0x10000001, 0x0fffffff, 0xcffe763f, 0xfe81c9c2, 0x8907ba84, 0xb0063a87, 0xf703a573, 0x6caeccdd}, {0x08000001, 0x07ffffff, 0xe7fe691f, 0x291fb6e2, 0xc954c945, 0xf1a00947, 0x9050915d, 0x704e3a18}, {0x04000001, 0x03ffffff, 0xf3fe628f, 0x3e6ead72, 0xe97b50a5, 0x126cf0a7, 0xdcf70753, 0x721df0b5}, {0x02000001, 0x01ffffff, 0xf9fe5f47, 0x491628ba, 0xf98e9455, 0xa2d36457, 0x834a424d, 0x7305cc04}, {0x01000001, 0x00ffffff, 0xfcfe5da3, 0x4e69e65e, 0x0198362d, 0xeb069e30, 0xd673dfca, 0x7379b9ab}, {0x00800001, 0x007fffff, 0xfe7e5cd1, 0x5113c530, 0x059d0719, 0x8f203b1c, 0x8008ae89, 0x73b3b07f}, {0x00400001, 0x003fffff, 0xff3e5c68, 0x5268b499, 0x079f6f8f, 0xe12d0992, 0x54d315e8, 0x73d0abe9}, {0x00200001, 0x801fffff, 0x7f9e5c33, 0x53132c4e, 0x08a0a3ca, 0x8a3370cd, 0x3f384998, 0x73df299e}, {0x00100001, 0x400fffff, 0xbfce5c19, 0xd3686828, 0x89213de7, 0x5eb6a46a, 0xb46ae370, 0x73e66878}};
};

struct fq_config {
  // field structure size = 12 * 32 bit
  static constexpr unsigned limbs_count = 12;
  // modulus = 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787
  static constexpr storage<limbs_count> modulus = {0xffffaaab, 0xb9feffff, 0xb153ffff, 0x1eabfffe, 0xf6b0f624, 0x6730d2a0, 0xf38512bf, 0x64774b84, 0x434bacd7, 0x4b1ba7b6, 0x397fe69a, 0x1a0111ea};
  // modulus*2 = 8004819110443334786835579651471808313113765639878015770664116272248063300981675728885375258258031328075788545119574
  static constexpr storage<limbs_count> modulus_2 = {0xffff5556, 0x73fdffff, 0x62a7ffff, 0x3d57fffd, 0xed61ec48, 0xce61a541, 0xe70a257e, 0xc8ee9709, 0x869759ae, 0x96374f6c, 0x72ffcd34, 0x340223d4};
  // modulus*4 = 16009638220886669573671159302943616626227531279756031541328232544496126601963351457770750516516062656151577090239148
  static constexpr storage<limbs_count> modulus_4 = {0xfffeaaac, 0xe7fbffff, 0xc54ffffe, 0x7aaffffa, 0xdac3d890, 0x9cc34a83, 0xce144afd, 0x91dd2e13, 0xd2eb35d, 0x2c6e9ed9, 0xe5ff9a69, 0x680447a8};
  
  static constexpr storage<2*limbs_count> modulus_wide = {0xffffaaab, 0xb9feffff, 0xb153ffff, 0x1eabfffe, 0xf6b0f624, 0x6730d2a0, 0xf38512bf, 0x64774b84, 
                                                          0x434bacd7, 0x4b1ba7b6, 0x397fe69a, 0x1a0111ea, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
                                                          0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

  // modulus^2
  static constexpr storage<2*limbs_count> modulus_sqared = {0x1c718e39, 0x26aa0000, 0x76382eab, 0x7ced6b1d, 0x62113cfd, 0x162c3383, 0x3e71b743, 0x66bf91ed, 
                                                            0x7091a049, 0x292e85a8, 0x86185c7b, 0x1d68619c, 0x0978ef01, 0xf5314933, 0x16ddca6e, 0x50a62cfd, 
                                                            0x349e8bd0, 0x66e59e49, 0x0e7046b4, 0xe2dc90e5, 0xa22f25e9, 0x4bd278ea, 0xb8c35fc7, 0x02a437a4};
  // 2*modulus^2
  static constexpr storage<2*limbs_count> modulus_sqared_2 = {0x38e31c72, 0x4d540000, 0xec705d56, 0xf9dad63a, 0xc42279fa, 0x2c586706, 0x7ce36e86, 0xcd7f23da, 
                                                              0xe1234092, 0x525d0b50, 0x0c30b8f6, 0x3ad0c339, 0x12f1de02, 0xea629266, 0x2dbb94dd, 0xa14c59fa, 
                                                              0x693d17a0, 0xcdcb3c92, 0x1ce08d68, 0xc5b921ca, 0x445e4bd3, 0x97a4f1d5, 0x7186bf8e, 0x05486f49};
  // 4*modulus^2
  static constexpr storage<2*limbs_count> modulus_sqared_4 = {0x71c638e4, 0x9aa80000, 0xd8e0baac, 0xf3b5ac75, 0x8844f3f5, 0x58b0ce0d, 0xf9c6dd0c, 0x9afe47b4, 
                                                              0xc2468125, 0xa4ba16a1, 0x186171ec, 0x75a18672, 0x25e3bc04, 0xd4c524cc, 0x5b7729bb, 0x4298b3f4, 
                                                              0xd27a2f41, 0x9b967924, 0x39c11ad1, 0x8b724394, 0x88bc97a7, 0x2f49e3aa, 0xe30d7f1d, 0x0a90de92};
  static constexpr unsigned modulus_bits_count = 381;
  // m = floor(2^(2*modulus_bits_count) / modulus)
  static constexpr storage<limbs_count> m = {0xd59646e8, 0xec4f881f, 0x8163c701, 0x4e65c59e, 0x80a19de7, 0x2f7d1dc7, 0x7fda82a5, 0xa46e09d0, 0x331e9ae8, 0x38a0406c, 0xcf327917, 0x2760d74b};
  static constexpr storage<limbs_count> one = {0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
  static constexpr storage<limbs_count> zero = {0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};
};

static constexpr unsigned weierstrass_b = 4;
